* KITTI Road Sementic Segmentation

The problem is to segment driving roads from others

** Dataset
- [[http://www.cvlibs.net/datasets/kitti/eval_road.php][KITTI Road/Lane Detection Dataset]]

Sample input images


** Method
- Pretrained VGG16
- Skip Connection
- Fully Convolution Network

*** VGG16

First, I used the pre-trained VGG16 network

#+BEGIN_SRC python :exports code
tf.saved_model.loader.load(sess, [vgg_tag], vgg_path)
#+END_SRC


*** Skip Connection

Skip connection greatly improves the performance of network.

First, run 1x1 convolution and then followed by =conv_transpose= layer

#+BEGIN_SRC python :exports code
  # layer7 -> Conv 1x1 -> ConvT
  with tf.variable_scope("layer7_deconv"):
      conv_1x1 = run_conv_1x1(vgg_layer7_out)
      output = run_conv_transpose(conv_1x1, 4, 2)

  # layer4 -> Conv 1x1 -> ConvT
  with tf.variable_scope("layer4_deconv"):
      conv_1x1 = run_conv_1x1(vgg_layer4_out)
      merged = tf.add(output, conv_1x1)
      output = run_conv_transpose(merged, 4, 2)

  # layer3 -> Conv 1x1 -> ConvT
  with tf.variable_scope("layer3_deconv"):
      conv_1x1 = run_conv_1x1(vgg_layer3_out)
      merged = tf.add(output, conv_1x1)
      output = run_conv_transpose(merged, 16, 8, name="nn_last_layer")

  return output
#+END_SRC


*** Fully Convolution Network

After all, we will need a fully convolution network because the label is the same size as the input image.

In this example, only 2 labels(road or not road) exist. Therefore, output shape is =(?, 160, 576, 2)=.
